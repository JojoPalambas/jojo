MyHTTPD

  To compile:
  $ mkdir build
  $ cd build
  $ cmake ..
  $ make

  To use:
  $ ./my_httpd [--dry-run] <conf_filename>

  At the end:
  $ cd ..
  $ rm -r build

  Main:
    Actions of the main function in chronological order:
    - using std::signal to set the signal handler
    - checking the arguments for the --dry-run option
    - parsing the configure file to create a vector of servers
    ! Unfortunately for the moment only the first server of the vector is used.
    - creating a mutex and giving the server a pointer to it
    - creating the thread pool
    - building up the global variable to be able to free everything on SIGINT
    - setting up the server
    - starting the infinite waiting loop of the server
    - returning 0 if no error occured

  Parser:
    Take a filename and a server vector as argument.
    Parse the configuration file corresponding to the filename and add servers
      on the vector according to the file infos: log_file (optional),
      server_name, port, ip, root_dir and log (optional).
    If an exception occurs catch it and exit with 2.

  Signal handler:
    Uses a global variable containing:
    - a vector containing all the servers
    - a pointer to the ThreadPool used py the program
    Catches SIGINT to free everything correctly before exiting

  ThreadPool:
    Contains:
    - a deque containing functions waiting to be executed by the threads
    - a vector of threads containing functions infinitely looking at the
      deque of functions to execute
    - a vector of threads making the servers wait
    - a mutex to force the threads to pick up functions from the deque one
      by one
    The waiting functions first try to lock the mutex. When one of them
      achieve to get the lock, it waits for the deque to be filled with
      at least one function. Then, it takes this function out of the deque,
      releases the lock and executes the function.

  Exceptions:
    GeneralException inherits from std::exception.
    AcceptFailException, AddFailException, WaitFailException,
      EpollCreateException and EpollCtlException inherits from the previous
      exception class GeneralException.
    Those are used to handle excceptions raised in server methods.
